name: Python tests
on:
  workflow_call:
    inputs:
      unit-platforms:
        required: false
        type: string
        default: '["ubuntu-22.04", "ubuntu-24.04", "windows-latest", "macos-latest"]'
        description: |
          The platforms to run unit tests on, as a JSON string.
      unit-python-versions:
        required: false
        type: string
        default: '["3.10", "3.11", "3.12", "3.13"]'
        description: |
          The python versions to run unit tests on, as a JSON string
      integration-platforms:
        type: string
        default: '["ubuntu-latest", "windows-latest", "macos-latest"]'
        description: |
          The platforms to run integration tests on, as a JSON string
      integration-python-versions:
        required: false
        type: string
        default: '["3.10"]'
        description: |
          The python versions to run integration tests on, as a JSON string


jobs:
  unit:
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.unit-platforms) }}
        python-version: ${{ fromJson(inputs.unit-python-versions) }}
        resolution: [highest]
        include:
          - platform: ubuntu-latest
            resolution: lowest
            python-version: ${{ fromJson(inputs.unit-python-versions)[0] }}
    runs-on: ${{ matrix.platform }}
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    steps:
      - uses: actions/cache@v4
        id: cache-uv
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ matrix.platform }}-${{ matrix.python-version }}-${{ matrix.resolution }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install tools
        shell: bash
        run: |
          make setup
      - name: Configure venv
        shell: bash
        run: |
          if [[ ${{ matrix.resolution }} != 'highest' ]]; then
            uv sync --python=${{ matrix.python-version }} --reinstall --resolution=${{ matrix.resolution }}
          else
            uv sync --locked --python=${{ matrix.python-version }} --reinstall
          fi
      - name: Unit tests
        run: |
          make coverage
        env:
          PYTEST_ADDOPTS: "--no-header -vv -rN"
      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        with:
          name: coverage-unit-${{ matrix.python-version }}-${{ matrix.platform }}
          files: .coverage*.xml
      - name: Upload test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: results-unit-${{ matrix.python-version }}-${{ matrix.platform }}-${{ matrix.resolution }}
          include-hidden-files: true
          path: |
            .results.unit.xml
            .coverage.xml
      - name: Run TICS analysis
        uses: tiobe/tics-github-action@v3
        if: ${{ runner.os == 'Linux' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/tics') }}
        with:
          mode: qserver
          project: ${{ github.repository }}
          viewerUrl: https://canonical.tiobe.com/tiobeweb/TICS/api/cfg?name=default
          branchdir: ${{ github.workspace }}
          ticsAuthToken: ${{ secrets.TICSAUTHTOKEN }}
          installTics: true
  integration:
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.integration-platforms) }}
        resolution: [highest]
        python-version: ${{ fromJson(inputs.integration-python-versions) }}
        include:
          - platform: ubuntu-latest
            resolution: lowest
            python-version: ${{ fromJson(inputs.unit-python-versions)[0] }}
    runs-on: ${{ matrix.platform }}
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv
    steps:
      - uses: actions/cache@v4
        id: cache-uv
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ matrix.platform }}-${{ matrix.python-version }}-${{ matrix.resolution }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install tools
        run: |
          make setup
      - name: Configure venv
        shell: bash
        run: |
          if [[ ${{ matrix.resolution }} != 'highest' ]]; then
            uv sync --reinstall --resolution=${{ matrix.resolution }} --python=${{ matrix.python-version }}
          else
            uv sync --locked --reinstall --python=${{ matrix.python-version }}
          fi
      - name: Integration tests
        run: |
          make test-integration
        env:
          PYTEST_ADDOPTS: "--no-header -vv -rN"
      - name: Upload test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: results-integration-${{ matrix.python-version }}-${{ matrix.platform }}-${{ matrix.resolution }}
          include-hidden-files: true
          path: .results.integration.xml
