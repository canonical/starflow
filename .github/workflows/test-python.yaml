name: Test Python
on:
  workflow_call:
    inputs:
      fast-test-platforms:
        type: string
        default: '["jammy", "noble"]'
        description: |
          The platforms to run fast tests on, as a JSON array.
      fast-test-python-versions:
        type: string
        default: '["3.10", "3.11", "3.12", "3.13"]'
        description: |
          The python versions to run fast tests on, as a JSON array.
      slow-test-platforms:
        type: string
        default: '["jammy"]'
        description: |
          The platforms to run slow tests on, as a JSON array.
      slow-test-python-versions:
        type: string
        default: '["3.10"]'
        description: |
          The python versions to run slow tests on, as a JSON array.
      lowest-python-platform:
        type: string
        description: |
          The platform to run the lowest python version tests on.
        default: "ubuntu-20.04"
      lowest-python-version:
        type: string
        description: |
          The Python version to run when using "lowest" resolution for tests.
        default: "3.10"

jobs:
  fast:
    name: Fast tests
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.fast-test-platforms) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up uv with caching
        id: setup-uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-suffix: ${{ toJSON(matrix.platform) }}
      - name: Set up tests
        shell: bash
        run: |
          for python_version in $(echo '${{ inputs.fast-test-python-versions }}' | jq -r .[] | tr '\n' ' '); do
            python_dirname=$(echo ${{ runner.temp }} | tr '\\' /)/venv_$(echo $python_version | tr . _)
            make setup-tests UV_PROJECT_ENVIRONMENT="${python_dirname}"
          done
      - name: Run tests
        shell: bash
        run: |
          exit_code=0
          for python_version in $(echo '${{ inputs.fast-test-python-versions }}' | jq -r .[] | tr '\n' ' '); do
            echo "::group::Python ${python_version}"
            python_dirname=$(echo ${{ runner.temp }} | tr '\\' /)/venv_$(echo $python_version | tr . _)
            if ! make test-coverage UV_PROJECT_ENVIRONMENT="${python_dirname}" PYTEST_ADDOPTS="-m 'not slow'"
            then
              exit_code=1
              echo "::error title=TESTS FAILED::Tests failed with Python ${python_version}"
            fi
            echo "::endgroup::"
          done
          exit $exit_code
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-fast-${{ matrix.platform }}
          overwrite: true
          path: |
            ./coverage.xml
            htmlcov/**
  slow:
    name: Slow tests
    strategy:
      matrix:
        platform: ${{ fromJson(inputs.slow-test-platforms) }}
        python-version: ${{ fromJson(inputs.slow-test-python-versions) }}
    runs-on: ${{ matrix.platform }}
    env:
      PYTEST_ADDOPTS: --no-header -v -rN -m 'slow'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up uv with caching
        id: setup-uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-suffix: ${{ toJSON(matrix.platform) }}
      - name: Install tools
        run: |
          make setup-tests
      - name: Run tests
        run: |
          make test-coverage
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-slow-${{ matrix.platform }}-${{ matrix.python-version }}
          overwrite: true
          path: |
            ./coverage.xml
            htmlcov/**
  lowest:
    name: Minimum dependencies (all tests)
    if: ${{ inputs.lowest-python-version }} != ''
    runs-on: ${{ inputs.lowest-python-platform }}
    env:
      UV_PYTHON: ${{ inputs.lowest-python-version }}
      UV_RESOLUTION: lowest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up uv with caching
        id: setup-uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-suffix: lowest-jammy
      - name: Install tools
        run: |
          make setup-tests
      - name: Run tests
        run: |
          make test-coverage
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lowest-py${{ inputs.lowest-python-version }}
          overwrite: true
          path: |
            ./coverage.xml
            htmlcov/**
